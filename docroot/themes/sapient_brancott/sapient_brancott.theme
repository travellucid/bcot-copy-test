<?php

/**
 * @file
 * Bootstrap sub-theme.
 *
 * Place your custom PHP code in this file.
 */
use Cmfcmf\OpenWeatherMap;
use Cmfcmf\OpenWeatherMap\Exception as OWMException;

function sapient_brancott_preprocess_views_view_fields(&$variables) {
  global $base_url;

  $view_id = $variables['view']->storage->id();
  
  switch ($view_id) {
    case 'our_wines':
	
      if ($variables['view']->current_display == 'block_1') {
		$values = $variables['row']->_entity->field_ranges->getValue();
		$details = getRangeDetailsFiltered();
		 $nids_array = array();
		 foreach($values as $value){
			 $nids_array[] = $value['target_id'];
		 }
		 foreach($nids_array as $nid){
			 
			 $nid_title= \Drupal\node\Entity\Node::load($nid);
			 $nid_title =  $nid_title->title->value;
			 //print_r($nid_title);die;
			 foreach($details as $key => $detail){
				 if($nid_title == $detail->title){
			$detail_array[$key]['title'] = $detail->title;
			$detail_array[$key]['desc'] = $detail->description;
			$ids = \Drupal::entityQuery('node')
		  ->condition('title', $detail->title)
          ->condition('status', 1)
          ->execute();
		  $array_nid = array_values($ids);
		 $nid = $array_nid[0];
		 
		  
		  $node_load = \Drupal\node\Entity\Node::load($nid);
		  $bkg_color =  $node_load->field_ranges_background_color->value;
		  $range_image_target = $node_load->field_ranges_image->target_id;
		  $range_image_file = \Drupal\file\Entity\File::load($range_image_target);
		  if($range_image_file){
          $range_image_url = \Drupal\image\Entity\ImageStyle::load('medium')->buildUrl($range_image_file->getFileUri());
		  }
		  $detail_array[$key]['bkg_colr'] = $bkg_color;
		  $detail_array[$key]['range_image'] = $range_image_url;
		 
			 }	  
		}
		 }
		 
		 
		
		$variables['range_details'] = $detail_array;
		//print_r($detail_array);die;
      }
    case 'homepage_components':
      if ($variables['view']->current_display == 'common_hero_component') {

        if ($variables['row']->_entity->field_season_description) {
          $values = $variables['row']->_entity->field_season_description->getValue();
          $city = $variables['row']->_entity->field_city->value;

          $month = date('n');
          if (!empty($values[$month - 1])) {
            $variables['season_desc'] = $values[$month - 1]['value'];
          }
          else {
            $variables['season_desc'] = '';
          }
          $owm = new OpenWeatherMap('bd4028edc390aa0629042fefed9976ca');
          $weather = $owm->getWeather($city, 'metric');

          $icon_id = $weather->weather->icon;
          $basepath = base_path() . $variables['directory'];

          $variables['temp_icon'] = $base_url . $basepath . '/css/images\season_icons/' . $icon_id . '.svg';
          $variables['current_temp'] = round(html_entity_decode($weather->temperature->now));
          $variables['temp_unit'] = html_entity_decode($weather->temperature->getUnit());
		  //print_r($variables['current_temp']);echo"test";print_r($variables['temp_unit']);exit;
          $variables['current_date'] = date('d M Y / g:ia');
        }
      }
    case 'wines_hero_component':
      if ($variables['view']->current_display == 'wines_hero_component') {
        if ($variables['row']->_entity->field_wine_id) {
          $wine_id = $variables['row']->_entity->field_wine_id->value;
          $details = braoncott_rest_api_get_results($wine_id);
          $variables['wine_title'] = strtoupper($details->title);
          $variables['wine_range'] = strtoupper($details->range);
          $variables['wine_description'] = $details->description;
        }
      }
      if ($variables['view']->current_display == 'related_wines') {
		  
        if ($variables['row']->_entity->field_wine_id) {
          $related_wines_nids = $variables['row']->_entity->field_related_wines->getValue();
		  foreach($related_wines_nids as $related_wines_nid){
			$details = braoncott_rest_api_get_results($related_wines_nid['target_id']);
            $variables['wine_title'] = $details->title;
            $variables['wine_range'] = $details->range;
			$ids = \Drupal::entityQuery('node')
		         ->condition('title', $details->range)
                 ->condition('status', 1)    //content type condition also to be added
                 ->execute(); 
			$array_nid = array_values($ids);
			
			$nid = $array_nid[0];
		    if($nid){
		    $bkg_color = \Drupal\node\Entity\Node::load($nid);
		    $bkg_color =  $bkg_color->field_ranges_background_color->value;
		    $variables['range_bkg_color'] = $bkg_color;
			//print_r($variables['range_bkg_color']);die;
		  }
			
		  }          
        }
      }
      if ($variables['view']->current_display == 'awards_and_accolades') {
        if ($variables['row']->_entity->field_wine_id) {
          $wine_id = $variables['row']->_entity->field_wine_id->value;
          $details = braoncott_rest_api_get_results($wine_id);
          $variables['wine_award'] = $details->wineAwards;
        }
      }
      if ($variables['view']->current_display == 'tasting_notes_component') {
        if ($variables['row']->_entity->field_wine_id) {
          $wine_id = $variables['row']->_entity->field_wine_id->value;
          $details = braoncott_rest_api_get_results($wine_id);
          $variables['tasting_notes_aroma'] = $details->aroma;
          $variables['tasting_notes_taste'] = $details->taste;
          $variables['tasting_notes_complement'] = $details->complement;
          $variables['wine_title'] = $details->title;
          $variables['nutritional_info_alcohol'] = $details->wineNutritional[0]->alcohol;
          $alcohol = $details->wineNutritional[0]->alcohol;
          if ($alcohol) {
            $alcohol_cal = round(1000 / (((($alcohol) / 100) * 1000 * 0.789) / 10));
            $variables['nutritional_alcohol'] = $alcohol_cal;
            $alcohol_info_cal = round(((10 / $alcohol_cal) * 150));
            $variables['nutritional_alcohol_cal'] = $alcohol_info_cal;
          }
          else {
            $variables['nutritional_alcohol'] = '0';
            $variables['nutritional_alcohol_cal'] = '0';
          }          
          $variables['nutritional_info_calories'] = $details->wineNutritional[0]->calories;
          $calories = $details->wineNutritional[0]->calories;
          if ($calories) {
            $calories_cal = round((($calories) / 150) * $alcohol_cal);
            $variables['nutritional_calories'] = $calories_cal;
          }
          else {
            $variables['nutritional_calories'] = '0';
          }
          $variables['nutritional_info_fat'] = $details->wineNutritional[0]->fat;
          $fat = $details->wineNutritional[0]->fat;
          if ($fat) {
            $fat_cal = round((($fat) / 150) * $alcohol_cal);
            $variables['nutritional_fat'] = $fat_cal;            
          }
          else {
            $variables['nutritional_fat'] = '0';
          }
          $variables['nutritional_info_saturates'] = $details->wineNutritional[0]->saturates;
          $saturates = $details->wineNutritional[0]->saturates;
          if ($saturates) {
            $saturates_cal = round((($saturates) / 150) * $alcohol_cal);
            $variables['nutritional_saturates'] = $saturates_cal;
          }
          else {
            $variables['nutritional_saturates'] = '0';
          }
          $variables['nutritional_info_carbohydrates'] = $details->wineNutritional[0]->carbohydrates;
          $carbohydrates = $details->wineNutritional[0]->carbohydrates;
          if ($carbohydrates) {
            $carbohydrates_cal = number_format(((($carbohydrates) / 150) * $alcohol_cal),3);
            $variables['nutritional_carbohydrates'] = $carbohydrates_cal;
          }
          else {
            $variables['nutritional_carbohydrates'] = '0';
          }
          $variables['nutritional_info_sugars'] = $details->wineNutritional[0]->sugars;
          $sugars = $details->wineNutritional[0]->sugars;
          if ($sugars) {
            $sugars_cal = number_format(((($sugars) / 150) * $alcohol_cal),3);
            $variables['nutritional_sugars'] = $sugars_cal;
          }
          else {
            $variables['nutritional_sugars'] = '0';
          }
          $variables['nutritional_info_proteins'] = $details->wineNutritional[0]->proteins;
          $proteins = $details->wineNutritional[0]->proteins;
          if ($proteins) {
            $proteins_cal = round((($proteins) / 150) * $alcohol_cal);
            $variables['nutritional_proteins'] = $proteins_cal;
          }
          else {
            $variables['nutritional_proteins'] = '0';
          }
        }
      }
      break;
  }
}
