<?php

/**
 * @file
 * Bootstrap sub-theme.
 *
 * Place your custom PHP code in this file.
 */
use Cmfcmf\OpenWeatherMap;
use Cmfcmf\OpenWeatherMap\Exception as OWMException;

function sapient_brancott_preprocess_views_view_fields(&$variables) {

  global $base_url;
  $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $view_id = $variables['view']->storage->id();
  $variables['current_language'] = $langcode;
  switch ($view_id) {
    case 'stockists_component':
      if ($variables['view']->current_display == 'where_to_buy_stockists_component') {
        $count = count(views_get_view_result('stockists_component', 'where_to_buy_referenced_stockists_component'));
        $variables['stockists_count'] = $count;
      }
    case 'our_wines':
      if ($variables['view']->current_display == 'block_1') {
        $wine_count = count(views_get_view_result('our_wines', 'block_2', 1));
        $variables['wine_count'] = $wine_count;
      }
      if ($variables['view']->current_display == 'block_2') {
        $details = getRangeDetailsFiltered();

        $range_id = $variables['row']->_relationship_entities['field_range_selection_value']->field_range->getValue()[0]['target_id'];

        $wines_ids = $variables['row']->_relationship_entities['field_range_selection_value']->field_wines->getValue();
        $node_load_range = \Drupal\node\Entity\Node::load($range_id);
        $bkg_color = $node_load_range->field_ranges_background_color->value;
        $range_title = $node_load_range->title->value;
//          $range_title_slug = $node_load_range->field_slug->value;
        $range_id = $node_load_range->field_ranges_id->value;
        $url_range_title = strtolower(preg_replace('/\s+/', '-', $range_title));

        $url = $langcode . '/our-wines/' . $url_range_title;
        foreach ($details as $key => $detail) {
//            if ($range_title_slug == $detail->slug) {
          if ($range_id == $detail->id) {
            $range_title_api = $detail->title;
            // $range_desc_api = $detail->description;
            $range_desc_api = $detail->strapline;
          }
        }

        foreach ($wines_ids as $wine_id) {
          $exact_wine_id = $wine_id['target_id'];
          $node_load_wine = \Drupal\node\Entity\Node::load($exact_wine_id);
          $wine_image_target = $node_load_wine->field_wine_bottle_image->target_id;
          $wine_image_file = \Drupal\file\Entity\File::load($wine_image_target);
          if ($wine_image_file) {
            $wine_image_url[] = file_create_url($wine_image_file->getFileUri());
          }
        }
        $wine_botl_1 = $wine_image_url[0];
        $wine_botl_2 = $wine_image_url[1];
        $range_details = array('bkg_colr' => $bkg_color, 'range_title' => $range_title_api, 'url' => $url, 'range_desc_api' => $range_desc_api, 'botl_1_img' => $wine_botl_1, 'botl_2_img' => $wine_botl_2);

        $variables['range_details'] = $range_details;
        //print_r($range_details);die;
      }
    case 'homepage_components':
      if ($variables['view']->current_display == 'tour_experience_rezdy') {
        $node = \Drupal::routeMatch()->getParameter('node');
        $node_translation = $node->getTranslation($langcode);
        //kint($node_translation);die;
      }
      if ($variables['view']->current_display == 'common_hero_component') {
        if ($variables['row']->_entity->field_city) {
          $city = $variables['row']->_entity->field_city->value;
          $month = date('n');
          if (!empty($month == 1)) {
            $variables['climate_desc'] = $variables['row']->_entity->field_climate_desc_jan->getValue()[0]['value'];
          }
          elseif (!empty($month == 2)) {
            $variables['climate_desc'] = $variables['row']->_entity->field_climate_desc_feb->getValue()[0]['value'];
          }
          elseif (!empty($month == 3)) {
            $variables['climate_desc'] = $variables['row']->_entity->field_climate_desc_march->getValue()[0]['value'];
          }
          elseif (!empty($month == 4)) {
            $variables['climate_desc'] = $variables['row']->_entity->field_climate_desc_april->getValue()[0]['value'];
          }
          elseif (!empty($month == 5)) {
            $variables['climate_desc'] = $variables['row']->_entity->field_climate_description_may->getValue()[0]['value'];
          }
          elseif (!empty($month == 6)) {
            $variables['climate_desc'] = $variables['row']->_entity->field_climate_description_june->getValue()[0]['value'];
          }
          elseif (!empty($month == 7)) {
            $variables['climate_desc'] = $variables['row']->_entity->field_climate_description_july->getValue()[0]['value'];
          }
          elseif (!empty($month == 8)) {
            $variables['climate_desc'] = $variables['row']->_entity->field_climate_description_aug->getValue()[0]['value'];
          }
          elseif (!empty($month == 9)) {
            $variables['climate_desc'] = $variables['row']->_entity->field_climate_description_sep->getValue()[0]['value'];
          }
          elseif (!empty($month == 10)) {
            $variables['climate_desc'] = $variables['row']->_entity->field_climate_description_oct->getValue()[0]['value'];
          }
          elseif (!empty($month == 11)) {
            $variables['climate_desc'] = $variables['row']->_entity->field_climate_description_nov->getValue()[0]['value'];
          }
          elseif (!empty($month == 12)) {
            $variables['climate_desc'] = $variables['row']->_entity->field_climate_description_dec->getValue()[0]['value'];
          }
          else {
            $variables['climate_desc'] = '';
          }
          
          $vc = \Drupal::config('brancott_our_wines.settings');
          $openweatherapi_key = $vc->get('openweatherapi_key');
          
          $cid = 'openweatherapi_cache';
          $cache = \Drupal::cache()->get($cid);

          if ($cache) {
            $weather = $cache->data;
            \Drupal::logger('openweatherapi_cache')->notice('Getting data from cache');
            \Drupal::logger('openweatherapi_cache')->notice('Getting data from cache: icon ID is ' . $weather->weather->icon);
            \Drupal::logger('openweatherapi_cache')->notice('Getting data from cache: temp is ' . $weather->temperature->now);
            \Drupal::logger('openweatherapi_cache')->notice('Getting data from cache: unit is ' . $weather->temperature->getUnit());
          } else {
            $openweatherapi_ttl = $vc->get('openweatherapi_cache_ttl');
            $openweatherapi_key = $openweatherapi_key ? $openweatherapi_key : 'bd4028edc390aa0629042fefed9976ca';
            $owm = new OpenWeatherMap($openweatherapi_key);
            $weather = $owm->getWeather($city, 'metric');
            \Drupal::logger('openweatherapi_cache')->notice('Getting data from API');
            \Drupal::logger('openweatherapi_cache')->notice('Getting data from API: icon ID is ' . $weather->weather->icon);
            \Drupal::logger('openweatherapi_cache')->notice('Getting data from API: temp is ' . $weather->temperature->now);
            \Drupal::logger('openweatherapi_cache')->notice('Getting data from API: unit is ' . $weather->temperature->getUnit());
            $current_time = time();
            $cache_time = $openweatherapi_ttl + $current_time;
            \Drupal::cache()->set($cid, $weather, $cache_time);
          }
          $icon_id = $weather->weather->icon;
          $basepath = base_path() . $variables['directory'];

          $variables['temp_icon'] = $base_url . $basepath . '/css/images\season_icons/' . $icon_id . '.svg';
          $variables['current_temp'] = round(html_entity_decode($weather->temperature->now));
          $variables['temp_unit'] = html_entity_decode($weather->temperature->getUnit());
          $variables['current_date'] = date('j M Y / g:ia');
        }
      }
    case 'wines_hero_component':

      if ($variables['view']->current_display == 'wines_hero_component') {
        if ($variables['row']->_entity->field_wine_id) {
          $wine_id = $variables['row']->_entity->field_wine_id->value;
          $details = braoncott_rest_api_get_results($wine_id);
          $variables['wine_title'] = mb_strtoupper($details->title);
          $variables['wine_range'] = mb_strtoupper($details->range);
          $variables['wine_description'] = $details->description;
          $ids = \Drupal::entityQuery('node')
              ->condition('title', $details->range)
              ->condition('status', 1)    //content type condition also to be added
              ->execute();
          $range_nid = reset($ids);

          $bkg_color = \Drupal\node\Entity\Node::load($range_nid);
          $bkg_color = $bkg_color->field_ranges_background_color->value;

          $variables['range_bkg_colr'] = $bkg_color;
        }
      }
      if ($variables['view']->current_display == 'related_wines') {
        if ($variables['row']->_entity->field_wine_id) {

          //$wine_ids_array = $variables['row']->_entity->field_related_wines->getValue();
          $wine_ids_array = array();
          //$wine_ids_array = $variables['row']->_entity->field_related_wines->getValue();
          $node = \Drupal::routeMatch()->getParameter('node');
          //$node_translation = $node->getTranslation($langcode);
          $node_translation = $node;
          $wine_ids_array = $node_translation->field_related_wines->getValue();
          $winedetails = array();
          foreach ($wine_ids_array as $key => $value) {

            $con = \Drupal\Core\Database\Database::getConnection();
            $query = $con->select('node_field_data', 'n')->distinct();
            $query->fields('n', array('nid'));
            $query->condition('n.nid', $value['target_id'], '=');
            //$query->condition('n.langcode', $langcode, '=');
            $new_nid_transtion = $query->execute()->fetchField();
            if ($new_nid_transtion) {
              $node_load = \Drupal\node\Entity\Node::load($new_nid_transtion);
              $wine_id = $node_load->field_wine_id->value;
              $bottle_img_tgt_id = $node_load->field_wine_bottle_image->getValue();
              $bottle_img_tgt_id = $bottle_img_tgt_id[0]['target_id'];
              $bottle_image_file = \Drupal\file\Entity\File::load($bottle_img_tgt_id);

              if ($bottle_image_file) {
                $bottle_image_url = file_create_url($bottle_image_file->getFileUri());
                $details = braoncott_rest_api_get_results($wine_id);
                $winedetails[$key]['title'] = $details->title;
                $winedetails[$key]['range'] = $details->range;
                $ids = \Drupal::entityQuery('node')
                    ->condition('title', $details->range)
                    ->condition('status', 1)    //content type condition also to be added
                    ->execute();
                $range_nid = reset($ids);
                $winedetails[$key]['botl_img'] = $bottle_image_url;
                $bkg_color = \Drupal\node\Entity\Node::load($range_nid);
                $bkg_color = $bkg_color->field_ranges_background_color->value;
                $winedetails[$key]['bkg_colr'] = $bkg_color;
                $winedetails[$key]['nid'] = $value['target_id'];
              }
            }
            else {
              continue;
            }
          }
          $variables['winedetails'] = $winedetails;
        }
      }
      if ($variables['view']->current_display == 'awards_and_accolades') {
        if ($variables['row']->_entity->field_wine_id) {
          $wine_id = $variables['row']->_entity->field_wine_id->value;
          $details = braoncott_rest_api_get_results($wine_id);
          $variables['wine_award'] = $details->wineAwards;
        }
      }
      if ($variables['view']->current_display == 'tasting_notes_component') {
        $block = \Drupal\block_content\Entity\BlockContent::load(21);
        $variables['nutritional_title'] = $block->field_nutritional_info_title->value;
        $variables['nutritional_cta_new'] = $block->field_nutritional_info_cta_new->value;
        $variables['nutritional_cta_first_uri'] = $block->field_nutritional_info_cta1->uri;
        $variables['nutritional_cta_second_uri'] = $block->field_nutritional_info_cta2->uri;
        $variables['nutritional_cta_first_title'] = $block->field_nutritional_info_cta1->title;
        $variables['nutritional_cta_second_title'] = $block->field_nutritional_info_cta2->title;
        $variables['nutritional_note_first'] = $block->field_nutritional_info_note1->value;
        $variables['nutritional_note_second'] = $block->field_nutritional_info_note12->value;
        if ($variables['row']->_entity->field_wine_id) {
          $wine_id = $variables['row']->_entity->field_wine_id->value;
          $details = braoncott_rest_api_get_results($wine_id);
          $variables['tasting_notes_aroma'] = $details->aroma;
          $variables['tasting_notes_taste'] = $details->taste;
          $variables['tasting_notes_complement'] = $details->complement;
          $variables['wine_title'] = $details->title;
          $variables['nutritional_info_alcohol'] = $details->wineNutritional[0]->alcohol;
          $alcohol = $details->wineNutritional[0]->alcohol;
          if ($alcohol) {
            $alcohol_cal = round(1000 / (((($alcohol) / 100) * 1000 * 0.789) / 10));
            $alcohol_cal_info = 1000 / (((($alcohol) / 100) * 1000 * 0.789) / 10);
            $variables['nutritional_alcohol'] = $alcohol_cal;
            $alcohol_info_cal = round(((10 / $alcohol_cal_info) * 150));
            $variables['nutritional_alcohol_cal'] = $alcohol_info_cal;
          }
          else {
            $variables['nutritional_alcohol'] = '0';
            $variables['nutritional_alcohol_cal'] = '0';
          }
          $variables['nutritional_info_calories'] = round($details->wineNutritional[0]->calories);
          $calories = $details->wineNutritional[0]->calories;
          if ($calories) {
            $calories_cal = round((($calories) / 150) * $alcohol_cal_info);
            $variables['nutritional_calories'] = $calories_cal;
          }
          else {
            $variables['nutritional_calories'] = '0';
          }
          $variables['nutritional_info_fat'] = $details->wineNutritional[0]->fat;
          $fat = $details->wineNutritional[0]->fat;
          if ($fat) {
            $fat_cal = round((($fat) / 150) * $alcohol_cal_info);
            $variables['nutritional_fat'] = $fat_cal;
          }
          else {
            $variables['nutritional_fat'] = '0';
          }
          $variables['nutritional_info_saturates'] = $details->wineNutritional[0]->saturates;
          $saturates = $details->wineNutritional[0]->saturates;
          if ($saturates) {
            $saturates_cal = round((($saturates) / 150) * $alcohol_cal_info);
            $variables['nutritional_saturates'] = $saturates_cal;
          }
          else {
            $variables['nutritional_saturates'] = '0';
          }
          $variables['nutritional_info_carbohydrates'] = $details->wineNutritional[0]->carbohydrates;
          $carbohydrates = $details->wineNutritional[0]->carbohydrates;
          if ($carbohydrates) {
            $carbohydrates_cal = number_format(((($carbohydrates) / 150) * $alcohol_cal_info), 3);
            $variables['nutritional_carbohydrates'] = $carbohydrates_cal;
          }
          else {
            $variables['nutritional_carbohydrates'] = '0';
          }
          $variables['nutritional_info_sugars'] = $details->wineNutritional[0]->sugars;
          $sugars = $details->wineNutritional[0]->sugars;
          if ($sugars) {
            $sugars_cal = number_format(((($sugars) / 150) * $alcohol_cal_info), 3);
            $variables['nutritional_sugars'] = $sugars_cal;
          }
          else {
            $variables['nutritional_sugars'] = '0';
          }
          $nutritional_info_pro = $details->wineNutritional[0]->proteins;
          $nutritional_info_pro_cal = $nutritional_info_pro * 1000;
          $variables['nutritional_info_proteins'] = round($nutritional_info_pro * 1000);
          $proteins = $details->wineNutritional[0]->proteins;
          if ($proteins) {
            $proteins_cal = round((($nutritional_info_pro_cal) / 150) * $alcohol_cal_info);
            $variables['nutritional_proteins'] = $proteins_cal;
          }
          else {
            $variables['nutritional_proteins'] = '0';
          }
        }
      }
    case 'generic_page':
      if ($variables['view']->current_display == 'hero_component') {
        if ($variables['row']->_entity->field_generic_page_dch_api_url) {
          $generic_dch_url = $variables['row']->_entity->field_generic_page_dch_api_url->getValue()[0][uri];
          if ($generic_dch_url) {
            $details = braoncott_rest_api_get_generic_url($generic_dch_url);
            $variables['generic_body_dch'] = $details;
          }
        }
      }
      break;
  }
}

function sapient_brancott_theme() {
  return array(
    'webform_submission_enquire_form_form' => array(
      'arguments' => array('form' => NULL,),
      'template' => 'enquire-form',
      'render element' => 'form'
    ),
    'webform_submission_book_a_table_form' => array(
      'template' => 'book-table-form',
      'render element' => 'form'
    ),
    'webform_submission_newsletter_signup_form' => array(
      'template' => 'newsletter-form',
      'render element' => 'form'
    ),
    'webform_submission_private_events_form' => array(
      'template' => 'private-events-form',
      'render element' => 'form'
    ),
  );
}

function sapient_brancott_preprocess_block(&$variables) {
  if ($variables['plugin_id'] == 'block_content:7bc94064-ecf8-4b99-8b65-f54285df636a') {
    $node = \Drupal\node\Entity\Node::load(1);
    if($node){
      
    $languages = $node->getTranslationLanguages();
    $translation_languages = array_keys($languages);
    $variables['translation_languages'] = $translation_languages;
    $variables['daylight'] = date(I);
    $alpha_only_message = \Drupal::config('brancott_our_wines.settings')->get('alpha_only_message');
    $alphanumeric_only_message = \Drupal::config('brancott_our_wines.settings')->get('alphanumeric_only_message');
    $numeric_only_message = \Drupal::config('brancott_our_wines.settings')->get('numeric_only_message');
    $email_message = \Drupal::config('brancott_our_wines.settings')->get('email_message');
    $variables['alpha_only_message'] = $alpha_only_message;
    $variables['alphanumeric_only_message'] = $alphanumeric_only_message;
    $variables['numeric_only_message'] = $numeric_only_message;
    $variables['email_message'] = $email_message;
    }
  }
//  if($variables['plugin_id'] == 'footerchangecountry') {
//    $alpha_only_message = \Drupal::config('brancott_our_wines.settings')->get('alpha_only_message');
//    $alphanumeric_only_message = \Drupal::config('brancott_our_wines.settings')->get('alphanumeric_only_message');
//    $numeric_only_message = \Drupal::config('brancott_our_wines.settings')->get('numeric_only_message');
//    $email_message = \Drupal::config('brancott_our_wines.settings')->get('email_message');
//    $variables['alpha_only_message'] = $alpha_only_message;
//    $variables['alphanumeric_only_message'] = $alphanumeric_only_message;
//    $variables['numeric_only_message'] = $numeric_only_message;
//    $variables['email_message'] = $email_message;
//  }
  $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $language_name = \Drupal::languageManager()->getCurrentLanguage()->getName();
  if ($language_name == 'English') {
    $variables['selected_language'] = 'GLOBAL';
  }
  else {
    $variables['selected_language'] = $language_name;
  }
  if ($variables['plugin_id'] == 'webform_block') {
    $node = \Drupal::routeMatch()->getParameter('node');
    $node_translation = $node->getTranslation($langcode);
    $enquire_form_title = $node_translation->field_enquire_title->value;
    if ($enquire_form_title) {
      $variables['enquire_title'] = $enquire_form_title;
    }
    $enquire_form_description = $node_translation->field_enquire_description->value;
    if ($enquire_form_description) {
      $variables['enquire_description'] = $enquire_form_description;
    }
    $newsletter_form_heading = $node_translation->field_newsletter_form_heading->value;
    if ($newsletter_form_heading) {
      $variables['newsletter_heading'] = $newsletter_form_heading;
    }
    $newsletter_form_subheading = $node_translation->field_newsletter_form_sub_headin->value;
    if ($newsletter_form_subheading) {
      $variables['newsletter_subheading'] = $newsletter_form_subheading;
    }
  }
}

function sapient_brancott_preprocess_views_view(&$variables) {
  $view = $variables['view'];
  $view_id = $variables['view']->storage->id();
  $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  
  if ($view_id == 'contact_us_page') {
    $node = \Drupal::routeMatch()->getParameter('node');
    $nid = $node->nid->getValue()[0]['value'];
    $node_translation = $node->getTranslation($langcode);

    $con = \Drupal\Core\Database\Database::getConnection();
    $query = $con->select('node_field_data', 'n');
    $query->Join('node__field_address_heading', 'h', 'n.langcode = h.langcode');
    $query->fields('h', array('field_address_heading_value'));
    $query->condition('n.langcode', $langcode, '=');
    $query->condition('n.nid', $nid, '=');
    $new_nid_transtion = $query->execute()->fetchField();
   // print_r($new_nid_transtion);die;
    $variables['address_heading'] = $new_nid_transtion;
  }
  if ($view_id == 'brancott_sitemap') {
    $curr_node = \Drupal::routeMatch()->getParameter('node');
    $curr_nid = $curr_node->nid->getValue()[0]['value'];
    $node_translation = $curr_node->getTranslation($langcode);
    //kint($node_translation);die;
    $con = \Drupal\Core\Database\Database::getConnection();
    $query = $con->select('node_field_data', 'n')->distinct();
    //$query->Join('node__field_address_heading', 'h', 'n.langcode = h.langcode');
    $query->fields('n', array('title'));
    $query->condition('n.nid', $curr_nid, '=');
    $query->condition('n.langcode', $langcode, '=');
    $sitemap_title = $query->execute()->fetchField();
     //print_r($sitemap_title);die;
    $variables['current_langcode'] = $langcode;
    $variables['sitemap_title'] = $sitemap_title;
  }
}

function sapient_brancott_preprocess_page(&$variables) {
  // Define {{ body_class }}  in the template.
  //$vc = $this->config('brancott_our_wines.settings');
  $fb_app_id = \Drupal::config('brancott_our_wines.settings')->get('facebook_app_id');
  //$fb_app_id = $vc->get('facebook_app_id');
  $variables['fb_app_id'] = $fb_app_id;
  //$node = \Drupal\node\Entity\Node::load($variables['node']->id());
  //$languages = $node->getTranslationLanguages();
 // kint($languages);die;
  if($variables['node']){
    $type = $variables['node']->getType();
    if ($type == 'error_page') { 
      $variables['#attached']['library'][] = 'sapient_brancott/header-error-page';
      
    }
  }
  

}

function sapient_brancott_preprocess_html(&$variables) {
  $analytics_head = \Drupal::config('brancott_our_wines.settings')->get('analytics_head');
  if ($analytics_head) {
    $variables['analytics_head'] = $analytics_head;
  }
  $analytics_body_begin = \Drupal::config('brancott_our_wines.settings')->get('analytics_body_begin');
  if ($analytics_body_begin) {
    $variables['analytics_body_begin'] = $analytics_body_begin;
  }
  $analytics_body_end = \Drupal::config('brancott_our_wines.settings')->get('analytics_body_end');
  if ($analytics_body_end) {
    $variables['analytics_body_end'] = $analytics_body_end;
  }
  $enable_data_layer = \Drupal::config('brancott_our_wines.settings')->get('enable_data_layer');
  $variables['enable_data_layer'] = $enable_data_layer;
}

