<?php

use Drupal\brancott_rest_api\Controller\BrancottRestApiController;
use Drupal\brancott_rest_api\Controller\BrancottSearchFilterController;
use Drupal\brancott_rest_api\Controller\BrancottRestApiControllerRanges;
use Drupal\brancott_rest_api\Controller\BrancottRestApiControllerGenericPage;

/**
 * @file
 * Test API module.
 */
function brancott_rest_api_reponse($url, $method = 'GET', $params = array()) {
  $methods = [
    'POST',
    'GET',
    'PUT',
    'DELETE'
  ];
  $result = array();

  try {
    if (empty($url)) {
      throw new Exception("Invalid url");
    }
    if (in_array(strtoupper($method), $methods) === FALSE) {
      throw new Exception("Invalid method");
    }
    else {

      switch (strtoupper($method)) {
        case 'GET':
        case 'POST':
        case 'PUT':
        case 'DELETE':

          $result = brancott_rest_api_call_request($url, $method, $params);
          break;
        default:
          throw new Exception("Invalid method");
          break;
      }
    }
  }
  catch (Exception $e) {
    echo $e->getMessage();
  }

  return $result;
}

function brancott_rest_api_call_request($requesturl, $method, $params = array()) {

  // request url
  $url = $requesturl;

  try {
    // initialized curl
    $ch = curl_init();
    // set header for curl request
    $headers = array(
      "Cache-Control: no-cache",
      "Pragma: no-cache"
    );
    // set required setting with curl configuration
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
    curl_setopt($ch, CURLOPT_FRESH_CONNECT, TRUE);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);
    curl_setopt($ch, CURLOPT_FORBID_REUSE, 1);

    // pass the additional values
    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));

    // close the curl connection
    $result = curl_exec($ch);
    $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    $response['result'] = $result;
    $response['code'] = $httpcode;
    curl_close($ch);
    return $response;
  }
  catch (Exception $e) {
    echo $e->getMessage();
  }
}

/**
 * implements hook_theme();
 * description: create the file as per below
 * eg : products-list.html.twig  for "products_list"
 */
function brancott_rest_api_theme($existing, $type, $theme, $path) {
  return array(
    'rest_content' => array(
      'variables' => array(
        'pagehtml' => NULL,
        'data' => NULL
      )
    ),
    'search_results_template' => array(
      'variables' => array('search_array' => NULL),
    ),
    'search_results_range_template' => array(
      'variables' => array('range_details' => NULL, 'search_array' => NULL),
    ),
  );
}

function braoncott_rest_api_get_results($wine_id) {
  $rest_api = new BrancottRestApiController();
  $value = $rest_api->getProductDetails($wine_id);
  return $value;
}

function braoncott_rest_api_get_filters() {
  $rest_api_filters = new BrancottRestApiControllerFilters();
  $value = $rest_api_filters->getFilters();
  return $value;
}

function braoncott_rest_api_get_ranges() {
  $rest_api_ranges = new BrancottRestApiControllerRanges();
  $value = $rest_api_ranges->getRanges();
  return $value;
}

function braoncott_rest_api_get_ranges_details() {
  $value = getRangeDetails();
  return $value;
}

function getRangeDetailsFiltered() {
  $rest_api_ranges = new BrancottRestApiControllerRanges;
  $values_ranges = $rest_api_ranges->getRanges();
  return $values_ranges;
}

function braoncott_rest_api_get_generic_url($generic_dch_url) {
  $rest_api_generic_page = new BrancottRestApiControllerGenericPage();
  $value = $rest_api_generic_page->getGenericPage($generic_dch_url);
  return $value;
}

function brancott_rest_api_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form_id == 'webform_submission_newsletter_signup_form') {
    $form['actions']['submit']['#submit'][] = 'brancott_newsletter_salesforce';
  }
}

function brancott_newsletter_salesforce() {
  require(drupal_get_path('module', 'brancott_rest_api') . '/sdk/ET_Client.php');
  try {
    $myclient = new ET_Client();
    $DataExtensionNameForTesting = "2D45CEE8-2751-44FA-ADB5-90A896175A05";
    // Add a row to a DataExtension 
    \Drupal::logger('my_module')->notice("Add a row to a DataExtension  \n");
    $postDRRow = new ET_DataExtension_Row();
    $postDRRow->authStub = $myclient;
    $postDRRow->props = array("EmailAddress" => "sometestemailid1@example.com"); //will be adding dynamic values from form_state
    $postDRRow->CustomerKey = $DataExtensionNameForTesting;
    $postResult = $postDRRow->post();
    \Drupal::logger('my_module')->notice('Post Status: ' . ($postResult->status ? 'true' : 'false') . "\n");
    \Drupal::logger('my_module')->notice('Code: ' . $postResult->code);
    \Drupal::logger('my_module')->notice('Message: ' . $postResult->message);
    \Drupal::logger('my_module')->notice('Result Count: ' . count($postResult->results));
//	\Drupal::logger('my_module')->notice( 'Results: ');
//	\Drupal::logger('my_module')->notice($postResult->results);
//	print "\n---------------\n";
//  exit;      
//	
//	//Get rows from Data Extension using filter (By Name)
//	print_r("Get rows from Data Extension using filter (By Name) \n");
//	$getDERows = new ET_DataExtension_Row();
//	$getDERows->authStub = $myclient;
//	$getDERows->props = array("EmailAddress", "Title");
//	$getDERows->Name = $DataExtensionNameForTesting;
//	$getDERows->filter = array('Property' => 'EmailAddress','SimpleOperator' => 'equals','Value' => 'gpahuja@sapient.com');
//	$getResult = $getDERows->get();
//	print_r('Get Status: '.($getResult->status ? 'true' : 'false')."\n");
//	print 'Code: '.$getResult->code."\n";
//	print 'Message: '.$getResult->message."\n";
//	print_r('More Results: '.($getResult->moreResults ? 'true' : 'false')."\n");
//	print 'Result Count: '.count($getResult->results)."\n";
//	print 'Results: '."\n";
//	print_r($getResult->results);
//	print "\n---------------\n";
  }
  catch (Exception $e) {
    \Drupal::logger('my_module')->notice('Caught exception: ' . $e->getMessage());
  }
}
